// =============== MCM ===============
int f(int i, int j, vector<int> &arr) {
	if(i == j) return 0;
	
	int mini = 1e9;
	for(int k = i; k < j; k++) {
		int steps = arr[i-1] * arr[k] * arr[j] + f(i, k, arr) + f(k+1, j, arr);
		mini = min(mini, steps);
	}
	
	return mini;
}
int matrixMultiplication(vector<int> &arr, int N) {
    return f(1, N-1, arr);
}

int f(int i, int j, vector<int> &arr, vector<vector<int>> &dp) {
	if(i == j) return 0;
	
	if(dp[i][j] != -1) return dp[i][j];
	
	int mini = 1e9;
	for(int k = i; k < j; k++) {
		int steps = arr[i-1] * arr[k] * arr[j] 
			+ f(i, k, arr, dp) + f(k+1, j, arr,dp);
		mini = min(mini, steps);
	}
	
	return dp[i][j] = mini;
}
int matrixMultiplication(vector<int> &arr, int N) {
	vector<vector<int>> dp(N, vector<int>(N, -1));
	
    return f(1, N-1, arr, dp);
}

int matrixMultiplication(vector<int> &arr, int N) {
	vector<vector<int>> dp(N, vector<int>(N, 0));
	
	for(int i = N-1; i >= 1; i--) {
		for(int j = i+1; j < N; j++) {
			int mini = 1e9;
			for(int k = i; k < j; k++) {
				int steps = arr[i-1] * arr[k] * arr[j] 
					+ dp[i][k] + dp[k+1][j];
				
				mini = min(mini, steps);
			}
			dp[i][j] = mini;
		}
	}
	
    return dp[1][N-1];
}


// ============ Minimum Cost to cut Stick ============
int f(int i, int j, vector<int> &cuts) {
	if(i > j) return 0;
	
	int mini = 1e9;
	for(int ind = i; ind <= j; ind++) {
		int cost = cuts[j+1] - cuts[i-1]
					+ f(i, ind-1, cuts) + f(ind+1, j, cuts);
		
		mini = min(mini, cost);
	}
	
	return mini;
}
int cost(int n, int c, vector<int> &cuts) {
    cuts.push_back(n);
	cuts.insert(cuts.begin(), 0);
	sort(cuts.begin(), cuts.end());
	
	return f(1, c, cuts);
}

int f(int i, int j, vector<int> &cuts, vector<vector<int>> &dp) {
	if(i > j) return 0;
	
	if(dp[i][j] != -1) return dp[i][j];
	
	int mini = 1e9;
	for(int ind = i; ind <= j; ind++) {
		int cost = cuts[j+1] - cuts[i-1]
					+ f(i, ind-1, cuts, dp) + f(ind+1, j, cuts, dp);
		
		mini = min(mini, cost);
	}
	
	return dp[i][j] = mini;
}
int cost(int n, int c, vector<int> &cuts) {
    cuts.push_back(n);
	cuts.insert(cuts.begin(), 0);
	sort(cuts.begin(), cuts.end());
	
	vector<vector<int>> dp(c+1, vector<int>(c+1, -1));
	
	return f(1, c, cuts, dp);
}

int cost(int n, int c, vector<int> &cuts) {
    cuts.push_back(n);
	cuts.insert(cuts.begin(), 0);
	sort(cuts.begin(), cuts.end());
	
	vector<vector<int>> dp(c+2, vector<int>(c+2, 0));
	
	for(int i = c; i >= 1; i--) {
		for(int j = 1; j <= c; j++) {
			if(i > j) continue;
			
			int mini = 1e9;
			for(int ind = i; ind <= j; ind++) {
				int cost = cuts[j+1] - cuts[i-1] + dp[i][ind-1] + dp[ind+1][j];
				mini = min(mini, cost);
			}
			dp[i][j] = mini;
		}
	}
	
	return dp[1][c];
}


// ================ Burst Balloons ================
int f(int i, int j, vector<int>& a, vector<vector<int>> &dp) {
	if(i > j) return 0;
	
	if(dp[i][j] != -1) return dp[i][j];
	
	int maxi = -1e9;
	for(int ind = i; ind <= j; ind++) {
		int cost = a[i-1] * a[ind] * a[j+1]
					+ f(i, ind-1, a, dp)
					+f(ind+1, j, a , dp);
		
		maxi = max(maxi, cost);
	}
	
	return dp[i][j] = maxi;
}
int maxCoins(vector<int>& a) {
	int n = a.size();
	a.push_back(1);
	a.insert(a.begin(), 1);
	
	vector<vector<int>> dp(n+1, vector<int>(n+1, -1));
	
	return f(1, n, a, dp);
}

int maxCoins(vector<int>& a) {
	int n = a.size();
	a.push_back(1);
	a.insert(a.begin(), 1);
	
	vector<vector<int>> dp(n+2, vector<int>(n+2, 0));
	
	for(int i = n; i >= 1; i--) {
		for(int j = 1; j <= n; j++) {
			//base case
			if(i > j) continue;
			
			int maxi = -1e9;
			for(int ind = i; ind <= j; ind++) {
				int cost = a[i-1] * a[ind] * a[j+1]
							+ dp[i][ind-1] + dp[ind+1][j];

				maxi = max(maxi, cost);
			}
			dp[i][j] = maxi;	
		}
	}
	
	return dp[1][n];
}


// ================ Boolean Evaluation ================
#define ll long long
int mod = 1000000007;
int f(int i, int j, int isTrue, string &exp, 
	  vector<vector<vector<ll>>> &dp) {
	if(i > j) return 0;
	
	if(i == j) {
		if(isTrue) return exp[i] == 'T';
		else return exp[i] == 'F';
	}
	
	if(dp[i][j][isTrue] != -1) return dp[i][j][isTrue];
	
	ll ways = 0;
	for(int ind = i+1; ind <= j-1; ind++) {
		ll lt = f(i, ind-1, 1, exp, dp);
		ll lf = f(i, ind-1, 0, exp, dp);
		ll rt = f(ind+1, j, 1, exp, dp);
		ll rf = f(ind+1, j, 0, exp, dp);
		
		
		if(exp[ind] == '&') {
			if(isTrue) ways = (ways + (lt * rt)%mod) % mod;
			else ways = (ways + (lt * rf)%mod + (lf * rt)%mod
						 + (lf * rf)%mod) % mod;
		}
		
		else if(exp[ind] == '|') {
			if(isTrue) ways = (ways + (lt * rt)%mod + (lt * rf)%mod
							   + (lf * rt)%mod) % mod;
			else ways = (ways + (rf * lf)%mod) % mod;
		}
		
		else {
			if(isTrue) ways = (ways + (lt * rf)%mod + (rt * lf)%mod) % mod;
			else ways = (ways + (lt * rt)%mod + (lf * rf)%mod) % mod;
		}
	}
	
	return dp[i][j][isTrue] = ways;
}
	
int evaluateExp(string & exp) {
    int n = exp.size();
	vector<vector<vector<ll>>> 
		dp(n, vector<vector<ll>>(n, vector<ll>(2, -1)));
		
	return f(0, n-1, 1, exp, dp);
}

#define ll long long
int mod = 1000000007;	
int evaluateExp(string & exp) {
    int n = exp.size();
	vector<vector<vector<ll>>> 
		dp(n+1, vector<vector<ll>>(n+1, vector<ll>(2, 0)));
		
	for(int i = n-1; i >= 0; i--) {
		for(int j = 0; j < n; j++) {
			for(int isTrue = 0; isTrue <= 1; isTrue++) {
				if(i > j) {
					dp[i][j][isTrue] = 0;
					continue;
				}
				
				if(i == j) {
					if(isTrue) dp[i][j][isTrue] = (exp[i] == 'T') ? 1 : 0;
					else dp[i][j][isTrue] = (exp[i] == 'F') ? 1 : 0;
					continue;
				}
					
				ll ways = 0;
				for(int ind = i+1; ind <= j-1; ind++) {
					ll lt = dp[i][ind-1][1];
					ll lf = dp[i][ind-1][0];
					ll rt = dp[ind+1][j][1];
					ll rf = dp[ind+1][j][0];

					if(exp[ind] == '&') {
						if(isTrue) ways = (ways + (lt * rt)%mod) % mod;
						else ways = (ways + (lt * rf)%mod + (lf * rt)%mod
									 + (lf * rf)%mod) % mod;
					}

					else if(exp[ind] == '|') {
						if(isTrue) ways = (ways + (lt * rt)%mod + (lt * rf)%mod
										   + (lf * rt)%mod) % mod;
						else ways = (ways + (rf * lf)%mod) % mod;
					}

					else {
						if(isTrue) ways = (ways + (lt * rf)%mod + (rt * lf)%mod) % mod;
						else ways = (ways + (lt * rt)%mod + (lf * rf)%mod) % mod;
					}
				}

				dp[i][j][isTrue] = ways;	
			}
		}
	}
	
	return dp[0][n-1][1];
}


// ============= Palindrome Partitioning ll =============
#include<bits/stdc++.h>
bool isPalindrome(int i, int j, string &str) {
	while(i < j) {
		if(str[i] != str[j]) return false;
		i++;
		j--;
	}
	return true;
}
int f(int i, int n, string &str, vector<int> &dp) {
	if(i == n) return 0;
	
	if(dp[i] != -1) return dp[i];
	
	int minCuts = 1e9;
	for(int j = i; j < n; j++) {
		if(isPalindrome(i, j, str)) {
			int cuts = 1 + f(j+1, n, str, dp);
			minCuts = min(minCuts, cuts);
		}
	}
	
	return dp[i] = minCuts;
}
int palindromePartitioning(string str) {
    int n = str.size();
	vector<int> dp(n, -1);
	
	return f(0, n, str, dp) - 1; 
}

bool isPalindrome(int i, int j, string &str) {
	while(i < j) {
		if(str[i] != str[j]) return false;
		i++;
		j--;
	}
	return true;
}
int palindromePartitioning(string str) {
    int n = str.size();
	vector<int> dp(n+1, 0);
	
	dp[n] = 0;
	
	for(int i = n-1; i >= 0; i--) {
		int minCuts = 1e9;
		for(int j = i; j < n; j++) {
			if(isPalindrome(i, j, str)) {
				int cuts = 1 + dp[j+1];
				minCuts = min(minCuts, cuts);
			}
		}
		
		dp[i] = minCuts;
	}
	
	return dp[0] - 1; 
}

// ===================== Longest Common Subsequence ======================
int f(int ind1, int ind2, string &s, string &t, vector<vector<int>> &dp){
	if(ind1 < 0 || ind2 < 0) return 0;
	
	if(dp[ind1][ind2] != -1) return dp[ind1][ind2];
	
	if(s[ind1] == t[ind2]) return 1 + f(ind1-1, ind2-1, s, t, dp);
	
	return dp[ind1][ind2] = max(f(ind1-1, ind2, s, t, dp), f(ind1, ind2-1, s, t, dp));
}
int lcs(string s, string t) {
	int n = s.size();
	int m = t.size();
	
	vector<vector<int>> dp(n, vector<int>(m, -1));
	
	return f(n-1, m-1, s, t, dp);
}

//Shifting the index one right
int f(int ind1, int ind2, string &s, string &t, vector<vector<int>> &dp){
	if(ind1 == 0 || ind2 == 0) return 0;
	
	if(dp[ind1][ind2] != -1) return dp[ind1][ind2];
	
	if(s[ind1-1] == t[ind2-1]) return 1 + f(ind1-1, ind2-1, s, t, dp);
	
	return dp[ind1][ind2] = max(f(ind1-1, ind2, s, t, dp), f(ind1, ind2-1, s, t, dp));
}
int lcs(string s, string t) {
	int n = s.size();
	int m = t.size();
	
	vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
	
	return f(n, m, s, t, dp);
}

//tabulation
int lcs(string s, string t) {
	int n = s.size();
	int m = t.size();
	
	vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
	
	for(int i = 0; i <= n; i++) dp[i][0] = 0;
	for(int j = 0; j <= m; j++) dp[0][j] = 0;
	
	for(int i = 1; i <= n; i++){
		for(int j = 1; j <= m; j++) {
			if(s[i-1] == t[j-1]) dp[i][j] = 1 + dp[i-1][j-1];
			
			else dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
		}
	}
	
	return dp[n][m];
}

// Space optmzn
int lcs(string s, string t) {
	int n = s.size();
	int m = t.size();
	
	vector<int> prev(m+1, 0), curr(m+1, 0);
	
	for(int j = 0; j <= m; j++) prev[j] = 0;
	
	for(int i = 1; i <= n; i++){
		for(int j = 1; j <= m; j++) {
			if(s[i-1] == t[j-1]) curr[j] = 1 + prev[j-1];
			
			else curr[j] = max(prev[j], curr[j-1]);
		}
		prev = curr;
	}
	
	return prev[m];
}

// Print lcs
void lcs(string s, string t) {
	int n = s.size();
	int m = t.size();
	
	vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
	
	for(int i = 0; i <= n; i++) dp[i][0] = 0;
	for(int j = 0; j <= m; j++) dp[0][j] = 0;
	
	for(int i = 1; i <= n; i++){
		for(int j = 1; j <= m; j++) {
			if(s[i-1] == t[j-1]) dp[i][j] = 1 + dp[i-1][j-1];
			
			else dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
		}
	}
	
	int len = dp[n][m];
	string ans = "";
	for(int i = 0; i < len; i++) ans += "$";
	
	int index = len-1;
	int i = n, j = m;
	
	while(i > 0 && j > 0) {
	    
	    if(s[i-1] == t[j-1]) {
	        ans[index] = s[i-1];
	        index--;
	        i--, j--;
	    }
	    
	    else if(dp[i-1][j] > dp[i][j-1]) i--;
	    
	    else j--;
	}
	
    cout << ans;
}

int main() {
  string s1 = "abcde";
  string s2 = "bdgek";

  cout << "The Longest Common Subsequence is: ";
  lcs(s1, s2);
}


// ===================== Longest Common Substring ======================
int lcs(string &s, string &t){
	int n = s.size();
	int m = t.size();
	
	vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
	
	for(int i = 0; i <= n; i++) dp[i][0] = 0;
	for(int j = 0; j <= m; j++) dp[0][j] = 0;
	
	int ans = 0;
	
	for(int i = 1; i <= n; i++){
		for(int j = 1; j <= m; j++) {
			if(s[i-1] == t[j-1]) {
				dp[i][j] = 1 + dp[i-1][j-1];
				ans = max(ans, dp[i][j]);
			} 
			
			else dp[i][j] = 0;
		}
	}
	
	return ans;
}

int lcs(string &s, string &t){
	int n = s.size();
	int m = t.size();
	
	vector<int> prev(m+1, 0), curr(m+1, 0);
	
	int ans = 0;
	
	for(int i = 1; i <= n; i++){
		for(int j = 1; j <= m; j++) {
			if(s[i-1] == t[j-1]) {
				curr[j] = 1 + prev[j-1];
				ans = max(ans, curr[j]);
			} 
			
			else curr[j] = 0;
		}
		prev = curr;
	}
	
	return ans;
}


// ===================== Longest Palindromic Subsequence ======================
// lcs -> longest common Subsequence
int longestPalindromeSubsequence(string s){
	string t = s;
	reverse(t.begin(), t.end());
    return lcs(s, t);
}


// ============ Minimum insertions to make a string palindrome ================
// longestPalindromeSubsequence - the above function
int minInsertion(string &str) {
    int len = longestPalindromeSubsequence(str);
	return str.size() - len;
}


// ============ Minimum operations to make string a to b ================
int canYouMake(string &s, string &t) {
	return s.size() + t.size() - 2 * lcs(s, t);
}


// ======================== Shortest Supersequence =======================
string shortestSupersequence(string s, string t){
	int n = s.size();
	int m = t.size();
	
	vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
	
	for(int i = 0; i <= n; i++) dp[i][0] = 0;
	for(int j = 0; j <= m; j++) dp[0][j] = 0;
	
	for(int i = 1; i <= n; i++){
		for(int j = 1; j <= m; j++) {
			if(s[i-1] == t[j-1]) dp[i][j] = 1 + dp[i-1][j-1];
			
			else dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
		}
	}
	
	string ans = "";
	int i = n, j = m;
	
	while(i > 0 && j > 0) {
		if(s[i-1] == t[j-1]) {
			ans += s[i-1];
			i--;
			j--;
		}
		
		else if(dp[i-1][j] > dp[i][j-1]) {
			ans += s[i-1];
			i--;
		}
		
		else {
			ans += t[j-1];
			j--;
		}
	}
	
	while(i > 0) {
		ans += s[i-1];
		i--;
	}
	
	while(j > 0) {
		ans += t[j-1];
		j--;
	}
	
	reverse(ans.begin(), ans.end());
	
	return ans;
}


// ======================== Distinct Subsequence =======================
int mod = 1e9 + 7;
int f(int i, int j, string &s, string &t, vector<vector<int>> &dp) {
	if(j == 0) return 1;
	if(i == 0) return 0;
	
	if(dp[i][j] != -1) return dp[i][j];
	
	if(s[i-1] == t[j-1]) {
		int leaveOne = f(i-1, j-1, s, t, dp);
		int stay = f(i-1, j, s, t, dp);
		
		return dp[i][j] = (leaveOne + stay) % mod;
	} 
	
	else return dp[i][j] = f(i-1, j, s, t, dp);
}
int subsequenceCounting(string &s, string &t, int n, int m) {
    vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
	
	return f(n, m, s, t, dp);
} 

int mod = 1e9 + 7;
int subsequenceCounting(string &s, string &t, int n, int m) {
    vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
	
	for(int i = 0; i <= n; i++) dp[i][0] = 1;
	for(int j = 1; j <= m; j++) dp[0][j] = 0;
	
	for(int i = 1; i <= n; i++) {
		for(int j = 1; j <= m; j++) {
			if(s[i-1] == t[j-1]) {
				int leaveOne = dp[i-1][j-1];
				int stay = dp[i-1][j];
				
				dp[i][j] = (leaveOne + stay) % mod;
			} 
			
			else dp[i][j] = dp[i-1][j];
		}
	}
	
	return dp[n][m];
} 

int mod = 1e9 + 7;
int subsequenceCounting(string &s, string &t, int n, int m) {
    vector<int> prev(m+1, 0), curr(m+1, 0);
	
	prev[0] = 1;
	curr[0] = 1;
	
	//optional since we initialize the array as 0
	//for(int j = 1; j <= m; j++) dp[0][j] = 0;
	
	for(int i = 1; i <= n; i++) {
		for(int j = 1; j <= m; j++) {
			if(s[i-1] == t[j-1]) {
				int leaveOne = prev[j-1];
				int stay = prev[j];
				
				curr[j] = (leaveOne + stay) % mod;
			} 
			
			else curr[j] = prev[j];
		}
		prev = curr;
	}
	
	return prev[m];
} 

int mod = 1e9 + 7;
int subsequenceCounting(string &s, string &t, int n, int m) {
    vector<int> prev(m+1, 0);
	
	prev[0] = 1;
	
	for(int i = 1; i <= n; i++) {
		for(int j = m; j >= 1; j--) {
			if(s[i-1] == t[j-1]) {
				int leaveOne = prev[j-1];
				int stay = prev[j];
				
				prev[j] = (leaveOne + stay) % mod;
			} 
		}
	}
	
	return prev[m];
} 


// =========================== Edit Distance ===========================
int f(int i, int j, string &s, string &t, vector<vector<int>> &dp) {
	if(i == 0) return j;
	if(j == 0) return i;
	
	if(dp[i][j] != -1) return dp[i][j];
	
	if(s[i-1] == t[j-1]) return dp[i][j] = f(i-1, j-1, s, t, dp);
	
	int insert = 1 + f(i, j-1, s, t, dp);
	int del = 1 + f(i-1, j, s, t, dp);
	int replace = 1 + f(i-1, j-1, s, t, dp);
	
	return dp[i][j] = min(insert, min(del, replace));
}
int editDistance(string s, string t) {
	int n = s.size();
	int m = t.size();
	
    vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
	
	return f(n, m, s, t, dp);
}

int editDistance(string s, string t) {
	int n = s.size();
	int m = t.size();
	
    vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
	
	for(int j = 0; j <= m; j++) dp[0][j] = j;
	for(int i = 1; i <= n; i++) dp[i][0] = i;
	
	for(int i = 1; i <= n; i++) {
		for(int j = 1; j <= m; j++) {
			if(s[i-1] == t[j-1])  dp[i][j] = dp[i-1][j-1];
			
			else {
				int insert = 1 + dp[i][j-1];
				int del = 1 + dp[i-1][j];
				int replace = 1 + dp[i-1][j-1];
				
				dp[i][j] = min(insert, min(del, replace));
			}
		}
	}
	
	return dp[n][m];
}

int editDistance(string s, string t) {
	int n = s.size();
	int m = t.size();
	
    vector<int> prev(m+1, 0), curr(m+1, 0);
	
	for(int j = 0; j <= m; j++) prev[j] = j;
	
	for(int i = 1; i <= n; i++) {
		curr[0] = i;  //The second base case
		for(int j = 1; j <= m; j++) {
			if(s[i-1] == t[j-1])  curr[j] = prev[j-1];
			
			else {
				int insert = 1 + curr[j-1];
				int del = 1 + prev[j];
				int replace = 1 + prev[j-1];
				
				curr[j] = min(insert, min(del, replace));
			}
		}
		prev = curr;
	}
	
	return prev[m];
}



// =========================== WildCard Matching ===========================
int f(int i, int j, string &pattern, string &text, vector<vector<int>> &dp) {
	if(i == 0 && j == 0) return true;
	if(i == 0 && j > 0) return false;
	if(j == 0 && i > 0) {
		for(int k = 1; k <= i; k++) {
			if(pattern[k-1] != '*') return false;
		}
		return true;
	}
	
	if(dp[i][j] != -1) return dp[i][j];
	
	if(pattern[i-1] == text[j-1] || pattern[i-1] == '?') {
		return dp[i][j] = f(i-1, j-1, pattern, text, dp);
	}
	
	if(pattern[i-1] == '*') {
		return dp[i][j] = f(i-1, j, pattern, text, dp) || f(i, j-1, pattern, text, dp);
	}
	
	return dp[i][j] = false;
}
bool wildcardMatching(string pattern, string text) {
   	int n = pattern.size();
	int m = text.size();
	
	vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
	
	return f(n, m, pattern, text, dp);
}

bool wildcardMatching(string pattern, string text) {
   	int n = pattern.size();
	int m = text.size();
	
	vector<vector<bool>> dp(n+1, vector<bool>(m+1, false));
	
	dp[0][0] = true;
	
	for(int j = 1; j <= m; j++) dp[0][j] = false;
	
	for(int i = 1; i <= n; i++) {
		bool flag = true;
		for(int k = 1; k <= i; k++) {
			if(pattern[k-1] != '*') {
				flag = false;
				break;
			}
		}
        //For every row
        //assigning the 0th column value
		dp[i][0] = flag;
	}
	
	for(int i = 1; i <= n; i++) {
		for(int j = 1; j <= m; j++) {
			if(pattern[i-1] == text[j-1] || pattern[i-1] == '?') {
				dp[i][j] = dp[i-1][j-1];
			}
			
			else if(pattern[i-1] == '*') {
				dp[i][j] = dp[i-1][j] || dp[i][j-1];
			}
			
			else dp[i][j] = false;
		}
	}
	
	return dp[n][m];
}

bool wildcardMatching(string pattern, string text) {
   	int n = pattern.size();
	int m = text.size();
	
	vector<bool> prev(m+1, false), curr(m+1, false);
	
	prev[0] = true;
	
	for(int j = 1; j <= m; j++) prev[j] = false;
	
	for(int i = 1; i <= n; i++) {
		bool flag = true;
		for(int k = 1; k <= i; k++) {
			if(pattern[k-1] != '*') {
				flag = false;
				break;
			}
		}
		curr[0] = flag;
	}
	
	for(int i = 1; i <= n; i++) {
		// curr is the current row/s column
		// curr's 0th column value has to be assigned every time
		
		bool flag = true;
		for(int k = 1; k <= i; k++) {
			if(pattern[k-1] != '*') {
				flag = false;
				break;
			}
		}
		//For every row
		//assigning the 0th column value
		curr[0] = flag;
		
		for(int j = 1; j <= m; j++) {
			if(pattern[i-1] == text[j-1] || pattern[i-1] == '?') {
				curr[j] = prev[j-1];
			}
			
			else if(pattern[i-1] == '*') {
				curr[j] = prev[j] || curr[j-1];
			}
			
			else curr[j] = false;
		}
		prev = curr;
	}
	
	return prev[m];
}

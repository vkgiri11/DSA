//================================== Print all Subsequences =======================================
#include <bits/stdc++.h>
using namespace std;
// Subsequence -> A contigous/non-contigous sequence which folllows order
// TC - O(2^n)
// SC - O(n)

void printF(int idx,vector<int> &ans, int arr[], int n) {
    if(idx == n) {
        for(auto it : ans) cout << it << " ";
        
        if(ans.size() == 0) cout << "{}";
        
        cout << endl;
        return;
    }
    
    //take the elem into subsequence
    ans.push_back(arr[idx]);
    printF(idx+1, ans, arr, n);
    ans.pop_back();
    
    //remove the elem from subsequence
    printF(idx+1, ans, arr, n);
}

int main() {
    int arr[] = {3,1,2};
    int n = 3;
    vector<int> ans;
    
    printF(0,ans, arr, n);
}


//============================== Print all Subsequences that sums to k ===============================
#include <bits/stdc++.h>
using namespace std;

void printS(int idx, vector<int> &ans, int sumSoFar, int sum,  int arr[], int n) {
    if(idx == n) {
        if(sumSoFar == sum) {
            for(auto it : ans) cout << it << " ";
            cout << endl;
        }
        return;
    }
    
    ans.push_back(arr[idx]);
    sumSoFar += arr[idx];
    
    //pick the elem 
    printS(idx+1, ans, sumSoFar, sum, arr, n);
    
    sumSoFar -= arr[idx];
    ans.pop_back();
    
     //not pick the elem 
    printS(idx+1, ans, sumSoFar, sum, arr, n); 
}

int main() {
    int arr[] = {1,2,1};
    int n = 3;
    int sum = 2;
    vector<int> ans;
    
    printS(0, ans, 0, sum, arr, n);
}


//=========================== Print any one Subsequences that sums to k ===========================
#include <bits/stdc++.h>
using namespace std;

bool printS(int idx, vector<int> &ans, int sumSoFar, int sum,  int arr[], int n) {
    if(idx == n) {
        // condition satisfied
        if(sumSoFar == sum) {
            for(auto it : ans) cout << it << " ";
            cout << endl;
            return true;
        }
        // condition not satisfied
        return false;
    }
    
    ans.push_back(arr[idx]);
    sumSoFar += arr[idx];
    
    //pick the elem 
    if(printS(idx+1, ans, sumSoFar, sum, arr, n) == true) return true;
    
    sumSoFar -= arr[idx];
    ans.pop_back();
    
     //not pick the elem 
    if(printS(idx+1, ans, sumSoFar, sum, arr, n) == true) return true;

    return false;
}

int main() {
    int arr[] = {1,2,1};
    int n = 3;
    int sum = 2;
    vector<int> ans;
    
    printS(0, ans, 0, sum, arr, n);
}

//========================= Count the num of Subsequences that sums to k ==========================
#include <bits/stdc++.h>
using namespace std;

int printS(int idx, int sumSoFar, int sum,  int arr[], int n) {
    if(idx == n) {
        // condition satisfied
        if(sumSoFar == sum) return 1;
        
        // condition not satisfied
        return 0;
    }
    
    sumSoFar += arr[idx];
    
    //pick the elem 
    int l = printS(idx+1, sumSoFar, sum, arr, n);
    
    sumSoFar -= arr[idx];
    
     //not pick the elem 
    int r = printS(idx+1, sumSoFar, sum, arr, n);

    return l + r;
}

int main() {
    int arr[] = {1,2,1, 3, 3};
    int n = 5;
    int sum = 5;
    
    cout << printS(0, 0, sum, arr, n);
}